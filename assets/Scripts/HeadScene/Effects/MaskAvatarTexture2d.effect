// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        wh_ratio: {
          value: 1.0,
          tooltip: "图片的宽高比"
        }
        u_uvOffset: { 
          value: [0.0, 0.0, 1.0, 1.0],
          tooltip: "uv的偏移量"
        }
        u_uvRotated: { 
          value: 0.0,
          tooltip: "uv是否发生了旋转"
        }  
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    uniform MASKPARAM{
        vec4  u_uvOffset;
        float wh_ratio;     
        float u_uvRotated;          
    };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 uvNormalize;
    uvNormalize.x = (v_uv0.x - u_uvOffset.x) / (u_uvOffset.z - u_uvOffset.x);
    uvNormalize.y = (v_uv0.y - u_uvOffset.y) / (u_uvOffset.w - u_uvOffset.y);

    if(u_uvRotated > 0.5)
    {
      float temp = uvNormalize.x;
      uvNormalize.x = uvNormalize.y;
      uvNormalize.y = 1.0 - temp;
    }

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    //将uv的中心点置为（0,0），x的最大坐标为1，y的最大坐标为1
    vec2 uv = (uvNormalize.xy - 0.5) * 2.0;

    float radius = 1.0;

    float dis = 1.0;

    if(wh_ratio >=1.0){
      dis = sqrt((uv.x*wh_ratio*uv.x*wh_ratio) + (uv.y *uv.y));
    }else{
      dis = sqrt((uv.x*uv.x) + ((uv.y/wh_ratio) * (uv.y/wh_ratio)));
    }
    o.a = 1.0 - smoothstep(radius,radius+0.01,dis);    

    ALPHA_TEST(o);

    gl_FragColor = o;  
  }
}%
